#!/usr/bin/env python3
"""
Test script for the Journal Preview Dialog functionality.
This script creates a sample journal entry and displays the preview dialog.
"""
import os
import sys
import logging
import datetime
import numpy as np
from PySide6.QtWidgets import QApplication
from PySide6.QtCore import QTimer

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

# Import the journal preview dialog
try:
    from journal_preview_dialog import JournalPreviewDialog
    from journaling import JournalingManager
except ImportError as e:
    logging.error(f"Error importing required modules: {e}")
    sys.exit(1)

def create_sample_entry():
    """Create a sample journal entry for testing."""
    # Create a temporary journaling manager
    home_dir = os.path.expanduser("~")
    journal_dir = os.path.join(home_dir, "Documents", "Personal", "Audio Journal")
    
    # Create the directory if it doesn't exist
    os.makedirs(journal_dir, exist_ok=True)
    
    # Create a journaling manager
    journal_manager = JournalingManager(output_dir=journal_dir)
    
    # Sample transcription text
    transcription = """
    This is a test journal entry for the interactive preview dialog. 
    I'm testing the new feature that allows users to preview and edit their journal entries before saving.
    This should include a summary generated by Ollama if available, and the formatted text.
    The dialog should also allow playing the audio recording if one is provided.
    """
    
    # Create a sample audio array (just silence)
    sample_rate = 16000
    duration_sec = 3
    audio_data = np.zeros(sample_rate * duration_sec, dtype=np.float32)
    
    # Create the journal entry
    try:
        entry = journal_manager.create_journal_entry(
            transcription=transcription,
            audio_data=audio_data,
            sample_rate=sample_rate
        )
        return entry, journal_dir
    except Exception as e:
        logging.error(f"Error creating sample journal entry: {e}")
        # Create a minimal entry if the journaling manager fails
        timestamp = datetime.datetime.now()
        return {
            'timestamp': timestamp.strftime("%Y-%m-%d %H:%M:%S"),
            'date': timestamp.strftime("%Y-%m-%d"),
            'transcription': transcription,
            'summary': "Test summary for the journal entry preview dialog.",
            'formatted_text': transcription.strip(),
            'audio_file': None
        }, journal_dir

def main():
    """Main function to test the journal preview dialog."""
    # Create QApplication instance
    app = QApplication(sys.argv)
    
    # Create a sample journal entry
    logging.info("Creating sample journal entry...")
    entry, journal_dir = create_sample_entry()
    
    # Sample Obsidian vaults
    obsidian_vaults = {
        "Personal": os.path.join(os.path.expanduser("~"), "Documents", "Obsidian", "Personal"),
        "Work": os.path.join(os.path.expanduser("~"), "Documents", "Obsidian", "Work")
    }
    
    # Create and show the preview dialog
    logging.info("Showing journal preview dialog...")
    dialog = JournalPreviewDialog(
        parent=None,
        entry_data=entry,
        journal_dir=journal_dir,
        obsidian_vaults=obsidian_vaults
    )
    
    # Show the dialog
    result = dialog.exec()
    
    if result:
        # Get the updated entry data
        updated_entry = dialog.get_updated_entry()
        logging.info("Dialog accepted. Updated entry:")
        for key, value in updated_entry.items():
            if key not in ['audio_data', 'formatted_text', 'transcription']:
                logging.info(f"  {key}: {value}")
    else:
        logging.info("Dialog rejected. No changes saved.")
    
    # Exit the application
    sys.exit(0)

if __name__ == "__main__":
    main()
